package gen

import (
	"io"
	"text/template"

	"github.com/golang/glog"
	"google.golang.org/protobuf/compiler/protogen"
)

func ApplyTemplate(w io.Writer, f *protogen.File) error {

	if err := headerTemplate.Execute(w, tplHeader{
		File: f,
	}); err != nil {
		return err
	}

	return applyMessages(w, f.Messages)
}

func applyMessages(w io.Writer, msgs []*protogen.Message) error {
	for _, m := range msgs {

		if m.Desc.IsMapEntry() {
			glog.V(2).Infof("Skipping %s, mapentry message", m.GoIdent.GoName)
			continue
		}

		glog.V(2).Infof("Processing %s", m.GoIdent.GoName)
		if err := messageTemplate.Execute(w, tplMessage{
			Message: m,
		}); err != nil {
			return err
		}

		// recursively apply any nested messages
		if err := applyMessages(w, m.Messages); err != nil {
			return err
		}
	}

	return nil
}

type tplHeader struct {
	*protogen.File
}

type tplMessage struct {
	*protogen.Message
}

var (
	headerTemplate = template.Must(template.New("header").Parse(`
// Code generated by protoc-gen-go-binary. DO NOT EDIT.
// source: {{.Proto.Name}}

package {{.GoPackageName}}

import (
	"google.golang.org/protobuf/proto"
	)
`))

	messageTemplate = template.Must(template.New("message").Parse(`
// MarshalBinary implements encoding.BinaryMarshaler
func (msg *{{.GoIdent.GoName}}) MarshalBinary() ([]byte,error) {
	return proto.Marshal(msg)
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (msg *{{.GoIdent.GoName}}) UnmarshalBinary(b []byte) error {
	return proto.Unmarshal(b, msg)
}
`))
)
